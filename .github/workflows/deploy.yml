name: CI/CD Deploy

on:
  push:
    branches:
      - main # Trigger when pushing to main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

      # 3️⃣ Build Docker image with unique tag & push
      - name: Build and Push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}  # unique tag per commit
          IMAGE_NAME=${{ secrets.DOCKER_USER }}/express-app:$IMAGE_TAG
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV  # save for next step

      # 4️⃣ Deploy on EC2 via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Pull the latest image with unique tag
            sudo docker pull ${{ secrets.DOCKER_USER }}/express-app:${{ env.IMAGE_TAG }}

            # Stop and remove old container if exists
            if sudo docker ps -a --format '{{.Names}}' | grep -q '^express-app$'; then
              sudo docker stop express-app
              sudo docker rm express-app
            fi

            # Remove dangling images to save space
            sudo docker rmi -f $(sudo docker images -f "dangling=true" -q) || true

            # Run new container
            sudo docker run -d -p 3000:3000 --name express-app ${{ secrets.DOCKER_USER }}/express-app:${{ env.IMAGE_TAG }}
